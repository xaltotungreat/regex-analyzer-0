<?xml version="1.0" encoding="UTF-8"?>

<regex_config>
	<group name="GlobalTest">
		<group name="ResolveSO1">
			<complexRegexes>
				<complexRegex name="ResolveSource">
					<description>An interval in the available AML logs</description>
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<required_log_types>
						<log_type>AML</log_type>
					</required_log_types>
					<regexes>
						<regex name="MainRegex">
							<regexLine>((=+)|(\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d.\d\d\d.*))\r?\n((?!(=)).*\r?\n)*</regexLine>
						</regex>
					</regexes>
					<sortRequests>
						<sortRequestDateTime name="Date_Time" applicability="MERGE_RESULTS"/>
						<sortRequestRegex name="Regex_Time" applicability="MERGE_RESULTS">
							<regexes>
								<regex name="Default">
									<regexParam name="instance" type="Integer">0</regexParam>
									<regexLine>AML_TIME_REGEX</regexLine>
								</regex>
							</regexes>
						</sortRequestRegex>
					</sortRequests>
					<date_info>
						<date_format>AML_TIME_FORMAT</date_format>
						<regexes>
							<regex name="Default">
								<regexParam name="instance" type="Integer">0</regexParam>
								<regexLine>AML_TIME_REGEX</regexLine>
							</regex>
						</regexes>
					</date_info>
				</complexRegex>
				<refComplexRegex name="DestSameGroupNoTags">
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.ResolveSO1</refGroup>
				</refComplexRegex>
				<refComplexRegex name="DestSameGroupLessTags">
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.ResolveSO1</refGroup>
					<refTags>
						<tag name="Role">User Object</tag>
					</refTags>
				</refComplexRegex>
				<refComplexRegex name="DestSameGroupAllTags">
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.ResolveSO1</refGroup>
					<refTags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</refTags>
				</refComplexRegex>
				<refComplexRegex name="DestSameGroupMoreTags">
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.ResolveSO1</refGroup>
					<refTags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
						<tag name="Tag1">SO not found</tag>
					</refTags>
				</refComplexRegex>
			</complexRegexes>
		</group>
		<group name="ResolveSO2">
			<complexRegexes>
				<refComplexRegex name="DestDiffGroupNoTags">
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.ResolveSO1</refGroup>
				</refComplexRegex>
				<refComplexRegex name="DestDiffGroupLessTags">
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.ResolveSO1</refGroup>
					<refTags>
						<tag name="Role">User Object</tag>
					</refTags>
				</refComplexRegex>
				<refComplexRegex name="DestDiffGroupAllTags">
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.ResolveSO1</refGroup>
					<refTags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</refTags>
				</refComplexRegex>
				<refComplexRegex name="DestDiffGroupMoreTags">
					<tags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
					</tags>
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.ResolveSO1</refGroup>
					<refTags>
						<tag name="Role">User Object</tag>
						<tag name="Interval">TRUE</tag>
						<tag name="Tag1">SO not found</tag>
					</refTags>
				</refComplexRegex>
			</complexRegexes>
		</group>
		<group name="Params1">
			<complexRegexes>
				<complexRegex name="ResolveSource">
					<description>An interval in the available AML logs</description>
					<replaceParams>
						<replaceParam name="ParamSource1">Source1</replaceParam>
						<replaceParam name="ParamSource2">Source2</replaceParam>
						<replaceParam name="ParamSource3">Source3</replaceParam>
						<replaceParam name="ParamSource4">Source4</replaceParam>
					</replaceParams>
					<required_log_types>
						<log_type>AML</log_type>
					</required_log_types>
					<regexes>
						<regex name="MainRegex">
							<regexLine>((=+)|(\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d.\d\d\d.*))\r?\n((?!(=)).*\r?\n)*</regexLine>
						</regex>
					</regexes>
					<sortRequests>
						<sortRequestDateTime name="Date_Time" applicability="MERGE_RESULTS"/>
						<sortRequestRegex name="Regex_Time" applicability="MERGE_RESULTS">
							<regexes>
								<regex name="Default">
									<regexParam name="instance" type="Integer">0</regexParam>
									<regexLine>AML_TIME_REGEX</regexLine>
								</regex>
							</regexes>
						</sortRequestRegex>
					</sortRequests>
					<date_info>
						<date_format>AML_TIME_FORMAT</date_format>
						<regexes>
							<regex name="Default">
								<regexParam name="instance" type="Integer">0</regexParam>
								<regexLine>AML_TIME_REGEX</regexLine>
							</regex>
						</regexes>
					</date_info>
				</complexRegex>
				<refComplexRegex name="AddParam">
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.Params1</refGroup>
					<refReplaceParams>
						<refReplaceParam name="Add params" type="ADD">
							<!-- not added check the value -->
							<replaceParam name="ParamSource3">Dest3</replaceParam>
							<!-- added check name and value -->
							<replaceParam name="ParamSource5">Dest5</replaceParam>
						</refReplaceParam>
					</refReplaceParams>
				</refComplexRegex>
				<refComplexRegex name="ReplaceAddParam">
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.Params1</refGroup>
					<refReplaceParams>
						<refReplaceParam name="ReplaceAdd params" type="REPLACE_ADD">
							<!--replaced check the value -->
							<replaceParam name="ParamSource3">Dest3</replaceParam>
							<!-- added check name and value -->
							<replaceParam name="ParamSource5">Dest5</replaceParam>
						</refReplaceParam>
					</refReplaceParams>
				</refComplexRegex>
				<refComplexRegex name="ReplaceParam">
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.Params1</refGroup>
					<refReplaceParams>
						<refReplaceParam name="Replace params" type="REPLACE">
							<!--replaced check the value -->
							<replaceParam name="ParamSource3">Dest3</replaceParam>
							<!-- not replaced check name and value -->
							<replaceParam name="ParamSource5">Dest5</replaceParam>
						</refReplaceParam>
					</refReplaceParams>
				</refComplexRegex>
				<refComplexRegex name="RemoveParam">
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.Params1</refGroup>
					<refReplaceParams>
						<refReplaceParam name="Remove params" type="REMOVE">
							<replaceParam name="ParamSource1">Source1</replaceParam>
							<replaceParam name="ParamSource2">Source2</replaceParam>
							<replaceParam name="ParamSource3">Source3</replaceParam>
						</refReplaceParam>
					</refReplaceParams>
				</refComplexRegex>
				<refComplexRegex name="CombinedParam">
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.Params1</refGroup>
					<refReplaceParams>
						<refReplaceParam name="Add params" type="ADD">
							<!-- not added check the value -->
							<replaceParam name="ParamSource1">Dest1</replaceParam>
							<!-- added check name and value -->
							<replaceParam name="Added1">DestAdded1</replaceParam>
						</refReplaceParam>
						<refReplaceParam name="ReplaceAdd params" type="REPLACE_ADD">
							<!--replaced check the value -->
							<replaceParam name="ParamSource2">Dest2</replaceParam>
							<!-- added check name and value -->
							<replaceParam name="ReplacedAdded1">DestReplacedAdded1</replaceParam>
						</refReplaceParam>
						<refReplaceParam name="Replace params" type="REPLACE">
							<!--replaced check the value -->
							<replaceParam name="ParamSource3">Dest3</replaceParam>
							<!-- not replaced check name and value -->
							<replaceParam name="Replaced1">DestReplaced1</replaceParam>
						</refReplaceParam>
						<refReplaceParam name="Remove params" type="REMOVE">
							<!-- removed by name not value -->
							<replaceParam name="ParamSource4">Dest4</replaceParam>
						</refReplaceParam>
					</refReplaceParams>
				</refComplexRegex>
			</complexRegexes>
		</group>
		<!-- the acceptance check should check the position, name and type
			These tests make use of the following fact:
			It is possible to create an interval acceptance with the regex types FIND, MATCH etc
			and a regex acceptance with an interval type INTERVAL etc. Therefore we can check if the AC
			was replaced by checking the type: datetime or regex.
		-->
		<group name="Acceptances1">
			<complexRegexes>
				<complexRegex name="ResolveSource">
					<description>An interval in the available AML logs</description>
					<required_log_types>
						<log_type>AML</log_type>
					</required_log_types>
					<regexes>
						<regex name="MainRegex">
							<regexLine>((=+)|(\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d.\d\d\d.*))\r?\n((?!(=)).*\r?\n)*</regexLine>
						</regex>
					</regexes>
					<acceptances>
						<regexAcceptance name="AC1" type="MATCH">
							<regexes>
								<regex name="1">
									<regexLine>NOT_CONTAINS_1</regexLine>
								</regex>
							</regexes>
						</regexAcceptance>
						<regexAcceptance name="AC2" type="MATCH">
							<regexes>
								<regex name="1">
									<regexLine>NOT_CONTAINS_1</regexLine>
								</regex>
							</regexes>
						</regexAcceptance>
						<regexAcceptance name="AC3" type="MATCH">
							<regexes>
								<regex name="1">
									<regexLine>NOT_CONTAINS_1</regexLine>
								</regex>
							</regexes>
						</regexAcceptance>
						<regexAcceptance name="AC4" type="MATCH">
							<regexes>
								<regex name="1">
									<regexLine>NOT_CONTAINS_1</regexLine>
								</regex>
							</regexes>
						</regexAcceptance>
					</acceptances>
					<sortRequests>
						<sortRequestDateTime name="Date_Time" applicability="MERGE_RESULTS"/>
						<sortRequestRegex name="Regex_Time" applicability="MERGE_RESULTS">
							<regexes>
								<regex name="Default">
									<regexParam name="instance" type="Integer">0</regexParam>
									<regexLine>AML_TIME_REGEX</regexLine>
								</regex>
							</regexes>
						</sortRequestRegex>
					</sortRequests>
					<date_info>
						<date_format>AML_TIME_FORMAT</date_format>
						<regexes>
							<regex name="Default">
								<regexParam name="instance" type="Integer">0</regexParam>
								<regexLine>AML_TIME_REGEX</regexLine>
							</regex>
						</regexes>
					</date_info>
				</complexRegex>
				<refComplexRegex name="AddAC">
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.Acceptances1</refGroup>
					<refAcceptances>
						<!-- check it is added to the 0 position -->
						<refAcceptance name="Add with position" type="ADD" position="0">
							<dtIntervalAcceptance name="AC_Add" type="FIND">
								<lowBound>LOW_BOUND</lowBound>
								<highBound>HIGH_BOUND</highBound>
								<dtIntervalGuess>
									<regex name="FirstRecord">
										<regexLine>\ASGM_SIPSP_TIME_REGEX((?!(SGM_SIPSP_TIME_REGEX)).*\r?\n)*</regexLine>
									</regex>
									<regex name="LastRecord">
										<regexLine>SGM_SIPSP_TIME_REGEX((?!(SGM_SIPSP_TIME_REGEX)).*\r?\n)*\Z</regexLine>
									</regex>
								</dtIntervalGuess>
							</dtIntervalAcceptance>
						</refAcceptance>
						<!-- Not added the same AC -->
						<refAcceptance name="Not added same" type="ADD">
							<dtIntervalAcceptance name="AC1" type="MATCH">
								<lowBound>LOW_BOUND</lowBound>
								<highBound>HIGH_BOUND</highBound>
								<dtIntervalGuess>
									<regex name="FirstRecord">
										<regexLine>\ASGM_SIPSP_TIME_REGEX((?!(SGM_SIPSP_TIME_REGEX)).*\r?\n)*</regexLine>
									</regex>
									<regex name="LastRecord">
										<regexLine>SGM_SIPSP_TIME_REGEX((?!(SGM_SIPSP_TIME_REGEX)).*\r?\n)*\Z</regexLine>
									</regex>
								</dtIntervalGuess>
							</dtIntervalAcceptance>
						</refAcceptance>
						<!-- added to the end because the position is incorrect -->
						<refAcceptance name="Added to the end incorrect pos" type="ADD" position="10">
							<dtIntervalAcceptance name="AC10" type="FIND">
								<lowBound>LOW_BOUND</lowBound>
								<highBound>HIGH_BOUND</highBound>
								<dtIntervalGuess>
									<regex name="FirstRecord">
										<regexLine>\ASGM_SIPSP_TIME_REGEX((?!(SGM_SIPSP_TIME_REGEX)).*\r?\n)*</regexLine>
									</regex>
									<regex name="LastRecord">
										<regexLine>SGM_SIPSP_TIME_REGEX((?!(SGM_SIPSP_TIME_REGEX)).*\r?\n)*\Z</regexLine>
									</regex>
								</dtIntervalGuess>
							</dtIntervalAcceptance>
						</refAcceptance>
						<!-- added to the end because no position specified -->
						<refAcceptance name="Added to the end no position" type="ADD">
							<dtIntervalAcceptance name="AC_end" type="FIND">
								<lowBound>LOW_BOUND</lowBound>
								<highBound>HIGH_BOUND</highBound>
								<dtIntervalGuess>
									<regex name="FirstRecord">
										<regexLine>\ASGM_SIPSP_TIME_REGEX((?!(SGM_SIPSP_TIME_REGEX)).*\r?\n)*</regexLine>
									</regex>
									<regex name="LastRecord">
										<regexLine>SGM_SIPSP_TIME_REGEX((?!(SGM_SIPSP_TIME_REGEX)).*\r?\n)*\Z</regexLine>
									</regex>
								</dtIntervalGuess>
							</dtIntervalAcceptance>
						</refAcceptance>
					</refAcceptances>
				</refComplexRegex>
				<refComplexRegex name="ReplaceAddAC">
					<refName>ResolveSource</refName>
					<refGroup>GlobalTest.Acceptances1</refGroup>
					<refAcceptances>
						<!-- check it is added to the 0 position -->
						<refAcceptance name="Add with position" type="ADD" position="0">
							<regexAcceptance name="AC_Add" type="FIND">
								<regexes>
									<regex name="removeTransaction">
										<regexLine>((SipTransactionManager - removeTransaction\(\) Cannot find)|(SipCallLeg - setTransactionState\(\) cannot find transaction.*state= STATE_TERMINATED))</regexLine>
									</regex>
								</regexes>
							</regexAcceptance>
						</refAcceptance>
						<!-- added diff type -->
						<refAcceptance name="Not added same" type="ADD" position="2">
							<regexAcceptance name="AC1" type="FIND">
								<regexes>
									<regex name="removeTransaction">
										<regexLine>((SipTransactionManager - removeTransaction\(\) Cannot find)|(SipCallLeg - setTransactionState\(\) cannot find transaction.*state= STATE_TERMINATED))</regexLine>
									</regex>
								</regexes>
							</regexAcceptance>
						</refAcceptance>
						<!-- added to the end because the position is incorrect -->
						<refAcceptance name="Added to the end incorrect pos" type="ADD" position="10">
							<regexAcceptance name="AC10" type="FIND">
								<regexes>
									<regex name="removeTransaction">
										<regexLine>((SipTransactionManager - removeTransaction\(\) Cannot find)|(SipCallLeg - setTransactionState\(\) cannot find transaction.*state= STATE_TERMINATED))</regexLine>
									</regex>
								</regexes>
							</regexAcceptance>
						</refAcceptance>
						<!-- added to the end because no position specified -->
						<refAcceptance name="Added to the end no position" type="ADD">
							<regexAcceptance name="AC_end" type="FIND">
								<regexes>
									<regex name="removeTransaction">
										<regexLine>((SipTransactionManager - removeTransaction\(\) Cannot find)|(SipCallLeg - setTransactionState\(\) cannot find transaction.*state= STATE_TERMINATED))</regexLine>
									</regex>
								</regexes>
							</regexAcceptance>
						</refAcceptance>
					</refAcceptances>
				</refComplexRegex>
			</complexRegexes>
		</group>
	</group>
</regex_config>
